NEXT STEPS:
* Implement GetVersion for Centralized


GET VERSION
Returns the current version of the given file.
If SurfStore is centralized, then it should return a single value.
If SurfStore is distributed, it should return three (number of MetaDataStores) values separated by spaces.

Piazza
* when ReadFile() is called on a deleted file the version field of the FileInfo response returned by the MDS to the Client should still be the correct version number of the file
* the Client should detect that the file is deleted by seeing a hash list with a single hash "0" and output "Not Found" to stdout
* Return the version, 0 if it doesn't exist, and whatever the right version is if it is deleted.
* Each server leader or follower just returns its own version
* Use logger.info to sysout, not System.out.println...



* When uploading a file for the first time, we attempt to readFile, and file is not found. Should client print both Not Found and also OK if upload is successful?


Create a File test:
1. Does the result (Both WriteResult obtained after modifyFile and FileInfo obtained after readFile) contain the valid version number (remember that this is a "creation test")?
2. Does the result (FileInfo obtained after readFile) have the valid filename set? (in all the cases, even in the error ones, the result should set the filename as the same as that sent by the client)?
3. Does the result (WriteResult obtained after modifyFile) contain OLD_VERSION as the error code returned?
4. Does the MetaDataStore throw an error after processing this test?
5. Does the BlockStore throw an error after processing this test?
6. Does the MDS return at least some valid result, which the client can parse?
7. Are the BlockStore and MDS alive, or did either of them crash while running this testcase? 


HIGH-LEVEL NEXT STEP(s):
DONE Reads the local file
DONE creates a set of hashed blocks
DONE uploads them onto the MetadataStore 
DONE uploads them onto the BlockStore (if they were not already present there).
DONE When a client wants to create a new file, it first contacts the MetadataStore leader to see if the file already exists (or existed in the past, and has since been deleted).
DONE If the file already exists, it notes the previous version number, otherwise the file will start with a default version of 0.
DONE The client then reads its local copy of the file and splits it into blocks, as described above.
DONE It then computes the hash values of each of the blocks to form a hashlist.
DONE It then contacts the MetadataStore leader and invokes the ModifyFile() API, passing it the filename, updated version number, and hashlist.
TODO: ModifyFile should only be applied when the given version number is exactly one higher than the version stored in the metadatastore.
TEST: The MetadataStore will not create the filename to hashlist mapping if any blocks are not present in the BlockStore. 

Clients are also responsible for uploading the blocks of the file to the BlockStore service.
What if another client tries to download a file using the hashlist given to ModifyFile() by the first client to the MetadataStore before it’s done uploading all of the blocks to the BlockStore? 
How can SurfStore guarantee that a client actually did upload the necessary blocks for the file, and didn’t crash along the way?
* When the client does a ModifyFile() operation, the MetadataStore leader is going to query the BlockStore for each of the hash values in the hashlist, to see which, if any, of the blocks are already in the BlockStore.
DONE If any blocks are missing from the BlockStore, the MetadataStore will reply back to the client with a list of missing blocks. 

* Only when all the blocks are in the BlockStore will the MetadataStore signal a success return value to the client’s ModifyFile() operation
* From then on the new file version is available to any clients that want to download it.

https://cseweb.ucsd.edu/~gmporter/classes/sp18/cse291/post/project2/uploadExample.png

Usage:
$ client myconfig.txt upload /path/to/file
Ex:
$ client /etc/myconfig.txt upload /home/aturing/myfile.txt
OK

DOWNLOAD
To download a file, the client invokes the ReadFile() API call on the MetadataStore, passing in the filename.
The MetadataStore simply returns the version and hashlist to the client.
The client then downloads the blocks from the BlockStore to form the complete file. 

https://cseweb.ucsd.edu/~gmporter/classes/sp18/cse291/post/project2/downloadExample.png


